<p>
    Finally, a chance to rest.
</p>

<hr>

<div class="column">
    <div class="fireplace">
        <div class="fire"></div>
    </div>
</div>

<div class="column">
    <div class="couch">
        <div class="couch-part back-rest" id="1"></div>
        <div class="couch-part back-rest" id="2"></div>
        <div class="couch-part base" id="1"></div>
        <div class="couch-part base" id="2"></div>
        <div class="couch-part pillow" id="1"></div>
        <div class="couch-part pillow" id="2"></div>
        <div class="couch-part arm-rest" id="1"></div>
        <div class="couch-part arm-rest" id="2"></div>
    </div>

    <div class="table">
        <div class="opponent-hand">0 Bones</div>
        <div class="board"></div>
        <div id="score1">0</div>
        <div class="bone-yard"></div>
        <div id="score2">0</div>
        <div class="your-hand"></div>
    </div>

    <button id="play">
        Play Dominoes
    </button>
</div>

<div class="column">
    <%- include("../../../../../../views/chat-box.ejs", { room: "tree-house" }); %> 
</div>

<hr>

<a href="/forest/clearing/tree-house" id="exit">
    Exit the Tree House
</a>

<script>
    class Bone {
        constructor(values) {
            this.positon = [0, 0];
            this.rotation = 0;
            this.faceUp = false;
            this.touching = [ null, null, null, null ];
            this.values = values;
            this.player = null;
            $(".bone-yard").append(`<div class="bone in-yard" id="${values[0]}-${values[1]}"></div>`);
            this.$div = $(".bone-yard").children().last();
        }

        flipUp() {
            this.$div.text(`${this.values[0]} | ${this.values[1]}`);
        }

        unSelect() {
            this.$div.removeClass("selected");
        }

        select() {
            this.$div.addClass("selected");
            this.player.selectBone(this);
        }

        unOption() {
            this.$div.removeClass("option");
        }

        option() {
            this.$div.addClass("option");
        }

        moveTo(position, rotation) {
            this.positon = position;
            this.rotation = rotation;

            this.$div.addClass("on-board");
            this.$div.css("top", position[0]);
            this.$div.css("left", position[1]);
            this.$div.css("transform", `rotation(${rotation}deg)`);
        }

        fits(bone) {
            let compatible = false;

            for (let i = 0; i < this.values.length; i++) {
                for (let j = 0; j < bone.values.length; j++) {
                    if (this.values[i] === bone.values[j] && 
                    !bone.touching[2 * i + j] &&
                    !this.touching[2 * i + j] ) {
                        compatible = true;
                    }
                }
            }

            return compatible;
        }

        attach(bone, pole) {
            this.touching[pole] = bone;

            let offset = [0, 0];
            let rotation = 0;
            switch (pole) {
                case 0:
                    offset[1] -= 1;
                    break;
                case 1:
                    offset[0] += 1;
                    break;
                case 2:
                    offset[1] += 1;
                    break;
                case 3:
                    offset[0] -= 1;
                    break;
            }
            let position = [this.positon[0] + offset[0], this.positon[1] + offset[1]];

            bone.moveTo(position, rotation);
        }
    }

    class Board {
        constructor() {
            $(".board").empty();
            $(".bone-yard").empty();
            this.boneyard = [];
            this.bonesOnBoard = [];
            this.points = 0;
            this.ends = [];

            for (let i = 0; i < 7; i++) {
                for (let j = 0; j < 7; j++) {
                    this.boneyard.push(new Bone([i, j]));
                }
            }
        }

        place(choice) {
            console.log(`Placing ${choice.bone.values} at ${choice.target.values} ${choice.pole}`);
            
            if (choice.target === "auto") {
                for (let i = 0; i < this.ends.length; i++) {
                    if (choice.bone.fits(this.ends[i])) {
                        this.bonesOnBoard.push(choice.bone);
                        this.ends[i].attach(choice.bone, choice.pole);

                        return true;
                    }
                }

                return false;
            }
            else {
                if (choice.bone.fits(choice.target)) {
                    this.bonesOnBoard.push(choice.bone);
                    choice.target.attach(choice.bone, choice.pole);

                    return true;
                }
            }

            return false;
        }

        grabPoints() {
            let out = this.points;
            this.points = 0;

            return out;
        }

        getBoneFromYard() {
            if (this.boneyard.length > 0) {
                let chosen = Math.floor(Math.random() * this.boneyard.length);

                this.boneyard[chosen].flipUp();
                this.boneyard[chosen].$div.removeClass("in-yard");

                return this.boneyard.splice(chosen, 1)[0];
            }
            else return null;
        }

        updateOptions(bone) {
            for (let i = 0; i < this.bonesOnBoard.length; i++) {
                this.bonesOnBoard[i].$div.removeClass("selected");
            }

            for (let i = 0; i < this.ends.length; i++) {
                if (bone.fits(this.ends[i])) this.ends[i].$div.addClass("selected");
            }
        }

        domino() {
            let total = 0;

            for (let i = 0; i < this.boneyard.length; i++) {
                total += this.boneyard[i].values[0] + this.boneyard[i].values[1];
            }

            this.points = total - (total % 5);

            return this.grabPoints();
        }
    }

    class Player {
        constructor(name, $handDiv, $scoreDiv) {
            this.hand = [];
            this.board = null;
            this.choice = {
                bone: null,
                target: null,
                pole: -1
            };
            this.score = 0;
            this.options = [];
            this.name = name;
            this.$handDiv = $handDiv;
            this.$scoreDiv = $scoreDiv;
            this.clear();
        }

        draw(bone) {
            console.log(`${this.name} drawing`);
            
            bone.player = this;
            this.hand.push(bone);
            bone.$div.appendTo(this.$handDiv);

            return bone.values;
        }

        selectBone(bone) {
            for (let i = 0; i < this.hand.length; i++) {
                if (this.hand[i] !== bone) this.hand[i].unselect();
            }

            this.board.updateOptions(bone);
        }

        checkForDraw(bigBone = false) {
            this.options = [];

            if (!bigBone) {
                for (let i = 0; i < this.board.ends.length; i++) {
                    for (let j = 0; j < this.hand.length; j++) {
                        if (this.hand[j].fits(this.board.ends[i])) this.options.push(j);
                    }
                }
    
                if (this.options.length <= 0) {
                    let bone = this.board.getBoneFromYard();
                    if (bone !== null) {
                        this.draw(bone);
                        this.checkForDraw();
                    }
                }
            }
            else {
                let max = -1;
                let chosen = -1;

                for (let j = 0; j < this.hand.length; j++) {
                    if (this.hand[j].values[0] === this.hand[j].values[1]) {
                        if (this.hand[j].values[0] > max) {
                            max = this.hand[j].values[0];
                            chosen = j;
                        }
                    }
                }

                this.options = [chosen];
            }
        }

        autoTurn() {
            let chosen = Math.floor(Math.random() * this.options.length);

            return {
                bone: this.hand.splice(chosen, 1)[0],
                target: "auto",
                pole: "auto"
            }
        }

        checkForDomino() {
            if (this.hand.length <= 0) return true;
            else return false;
        }

        displayWinner(player) {
            $(".opponent-hand").text(`${player} won!`);
        }

        clear() {
            this.hand = [];
            this.$handDiv.empty();
            this.$scoreDiv.empty();
        }

        addPoints(points) {
            this.score += points;
            this.$scoreDiv.text(this.score);
        }
    }

    class DominoGame {
        constructor() {
            this.turn = -1;
            this.board = null;
            this.players = null;
            this.scoreToWin = 100;

            $("#play").on("click", (e) => {
                $("#play").toggleClass("invisible");
                this.startGame();
            });
        }

        startGame() {
            console.log("Starting Game");
            
            this.players = [
                new Player("Server", $(".opponent-hand"), $("#score1")), 
                new Player("You", $(".your-hand"), $("#score2"))
            ];

            this.startRound();
        }

        startRound() {
            console.log("Starting Round");

            this.turn = -1;
            while (this.turn === -1) {
                this.board = new Board();
                for (let i = 0; i < this.players.length; i++) {
                    this.players[i].board = this.board;
                    this.players[i].clear();
                }

                let max = -1;

                for (let i = 0; i < 7; i++) {
                    for (let j = 0; j < this.players.length; j++) {
                        let check = this.players[j].draw(this.board.getBoneFromYard());

                        if (check[0] === check[1]) {
                            if (check[0] > max) {
                                max = check;
                                this.turn = j;
                            }
                        }
                    }
                }
            }

            this.startTurn(true);
        }

        startTurn(bigBone = false) {
            console.log("Starting Turn");
            
            if (this.turn === 0) {
                this.players[0].checkForDraw(bigBone);
                this.board.place(this.players[0].autoTurn());
                this.players[0].addPoints(this.board.grabPoints());
                if (this.players[0].checkForDomino()) this.resolveDomino(0);

                this.turn = 1;
            }
            else if (this.turn === 1) {
                this.players[1].checkForDraw(bigBone);
            }
        }

        endTurn() {
            console.log("Ending Turn");
            
            this.board.place(this.players[1].choice);
            this.players[1].addPoints(this.board.grabPoints());
            if (this.players[1].checkForDomino()) this.resolveDomino(1);

            this.turn = 0;
            startTurn();
        }

        resolveDomino(player) {
            console.log("Resolving Domino");
            
            this.players[player].addPoints(this.board.domino());

            this.checkForWin();

            this.startRound();
        }

        checkForWin() {
            console.log("Checking for Win");
            
            for (let i = 0; i < this.players.length; i++) {
                if (this.players[i].score >= this.scoreToWin) {
                    this.players[0].displayWinner(this.players[i].name);

                    $("#play").toggleClass("invisible");
                }
            }
        }
    }

    const dominoGame = new DominoGame();
</script>