<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Wyatt Sushinsky</title>
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="/styles/main.css">
    <link rel="stylesheet" href="/styles/it.css">
</head>

<body>
    <main>
        <h2>IT Request Tracker</h2>

        <div class="login form">
            <label>
                Organization Email: <input type="text" id="email">
            </label>
            <label>
                Password: <input type="password" id="password">
                <input type="checkbox" id="unhide" onclick="tracker.toggleShowPassword()"> Show Password
            </label>
            <button onclick="tracker.attemptLogin()">Login</button>
        </div>
        
        <div class="submit form invisible">
            <h5>Submit a Request for <%= user ? user.username : "none" %></h5>
            <label>
                Title of Request:<input type="text" placeholder="title" id="title">
            </label>
            <label id="desc-label">
                Description:
                <textarea id="description" cols="30" rows="10" placeholder="description"></textarea>
            </label>
            <button id="submit" onclick="tracker.submitTicket()">Submit</button>
            <button id="to-history" onclick="tracker.goToHistoryForm()">Request History</button>
        </div>

        <div class="history form invisible">
            <h5>Request Ticket History</h5>
            <label>
                Start Date:
                <input type="date" id="start-date">
            </label>
            <label>
                End Date:
                <input type="date" id="end-date">
            </label>
            <button id="request-history" onclick="tracker.viewHistory()">View Ticket History</button>
            <button id="to-submit" onclick="tracker.goToSubmitForm()">Return</button>
        </div>

        <ul class="tickets invisible">
            <button id="close" onclick="tracker.closeHistory()">&#60;</button>
        </ul>

        <button class="logout invisible" onclick="tracker.logout()">Logout</button>
        <p id="alert"></p>
    </main>

    <footer>
        <p>This website created by</p><a href="/portfolio">Wyatt Lee Sushinsky</a>
    </footer>
</body>

<script src="/js/base.js"></script>
<script>
    const base = new Base();

    class Tracker {
        constructor() {
            this.state = "login";
            this.selectedTicket = -1;
            this.tickets = [];

            //general
            this.$alert = $("#alert");
            this.$logout = $(".logout");

            //login
            this.$loginForm = $(".login.form");
            this.$email = $("#email");
            this.$password = $("#password");

            //submit
            this.$submitForm = $(".submit.form");
            this.$title = $("#title");
            this.$description = $("#description");

            //history
            this.$historyForm = $(".history");            
            this.$dateStart = $("#start-date");
            this.$dateEnd = $("#end-date");

            //tickets
            this.$ticketsList = $("ul.tickets");

            <% if (user) { %>
                this.goToSubmitForm();
                this.$logout.removeClass("invisible");
            <% } %>
        }

        toggleShowPassword() {
            let hidden = this.$password.attr("type");
            if (hidden === "password") this.$password.attr("type", "text");
            else this.$password.attr("type", "password");
        }

        attemptLogin = async () => {
            let response = await base.attemptLogin(this.$email.val(), this.$password.val());

            if (response.status === "success") {
                location.reload();
            }
            else {
                this.$alert.text(response.message);
            }
        }

        logout = async () => {
            let response = await base.logout();

            if (response.status === "success") {
                location.reload();
            }
            else {
                this.$alert.text(response.message);
            }
        }

        goToSubmitForm() {
            this.$loginForm.addClass("invisible");
            this.$historyForm.addClass("invisible");
            this.$ticketsList.addClass("invisible");

            this.state = "submit";
            this.$submitForm.removeClass("invisible");
        }

        goToHistoryForm() {
            this.$loginForm.addClass("invisible");
            this.$submitForm.addClass("invisible");
            this.$ticketsList.addClass("invisible");

            this.state = "history";
            this.$historyForm.removeClass("invisible");
        }

        submitTicket = async () => {
            let response = await base.do("submit-ticket", {
                ticket: {
                    title: this.$title.val(),
                    description: this.$description.val()
                },
                route: "/pages/it"
            });

            if (response.status === "success") {
                this.$title.val("");
                this.$description.val("");
                this.$alert.text(response.data);
            }
            else {
                this.$alert.text(response.message);
            }
        }

        viewHistory = async () => {
            if (this.$dateStart[0].valueAsNumber && this.$dateEnd[0].valueAsNumber && this.$dateStart[0].valueAsNumber < this.$dateEnd[0].valueAsNumber) {
                let response = await base.do("view-history", {
                    dateStart: this.$dateStart[0].value,
                    dateEnd: this.$dateEnd[0].value,
                    route: "/pages/it"
                });

                if (response.status === "success") {
                    this.tickets = response.data;
    
                    this.$ticketsList.empty();
                    this.$ticketsList.append(`<button id="close" onclick="tracker.closeHistory()">&#60; Close Request History</button>`);

                    if (this.tickets.length > 0) {
                        let total = 0;

                        for (let i = 0; i < this.tickets.length; i++) {
                            if (this.tickets[i].used) total += this.tickets[i].used;
                            const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };

                            this.$ticketsList.append(`<li class="history-ticket">
                                <h4 id="title">Request: ${this.tickets[i].title}</h4>
                                <p>Ticket Number: ${this.tickets[i].id}</p>
                                <p id="date">Created On: ${(new Date(this.tickets[i].date)).toDateString()}</p>
                                <p id="quoted">Hours Quoted: ${this.tickets[i].quoted ? this.tickets[i].quoted : "none"}</p>
                                <p id="date">Resolved On: ${this.tickets[i].resolved ? (new Date(this.tickets[i].resolved)).toLocaleDateString('en-US', options) : "Unresolved"}</p>
                                <p id="used">Hours Used: ${this.tickets[i].used ? this.tickets[i].used : "none"}</p>
                                <p id="desc">Description: ${this.tickets[i].description}</p>
                                </li>`);
                        }

                        this.$ticketsList.append(`<h3>Total Hours Used: ${total}</h3>`);
                    }
                    else {
                        this.$ticketsList.append(`<p>No history found for the specified time period!</p>`);
                    }

                    this.$loginForm.addClass("invisible");
                    this.$submitForm.addClass("invisible");
                    this.$historyForm.addClass("invisible");
                    this.$ticketsList.removeClass("invisible");
                    this.$alert.text("");

                    this.state = "tickets";
                }
                else {
                    this.$alert.text(response.message);
                }
            }
            else {
                this.$alert.text("Please fix dates!");
            }
        }

        closeHistory() {
            this.tickets = [];
            this.$ticketsList.empty();
            
            this.goToHistoryForm();
        }
    }

    let tracker = new Tracker();
</script>
</html>