<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>NotherBase Documentation</title>
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="/styles/main.css">
</head>

<body>
    <style>
        <%- include("./index.css"); %>
    </style>

    <main>
        <h1>NotherBase Documentation</h1>
        <h2>notherbase-fs Version: 3.4.3</h2>

        <details>
            <summary><h3>General Web Development Setup</h3></summary>

            <h4>Windows and Linux Web Development Setup</h4>
            <a href="https://learn.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-wsl">Install Node.js on Windows Subsystem for Linux (WSL2)</a>
            <p>
                The link above is a Microsoft tutorial on installing WSL2 and Node.js. WSL2 is a 
                virtualized Ubuntu environment that will run Node.js in the terminal, which gives us
                a local development version of the NotherBase server. Follow the tutorial.
            </p>

            <p>
                VS Code is a great code editor. One of the extensions that highlights EJS 
                syntax is helpful.
            </p>

            <p>
                Windows Users: I recommend using Windows Terminal. If you use 
                VS Code, make sure to get the WSL extension.
            </p>

            <p>
                Linux Users: Go to the same link as the Windows folks and just ignore all the instructions
                that are specifically for Windows users.
            </p>

            <p>
                Nodemon is recommended to automatically restart your development server when your
                code changes.
            </p>
<pre class="code">
npm i -g nodemon
</pre>

            <h4>Create Your Own Base</h4>
            <p>
                By installing notherbase-fs to an npm package, one can setup 
                an Express.js server with automatic routes and a MongoDB connection.

                Enter the line below in the directory you'd like your code to be.
                Follow its instructions to the best of your ability, just hit enter
                if you're not sure what to fill in for an option. The second half of 
                this command ensures the npm package type is "module."
            </p>
<pre class="code">
npm init; npm pkg set type="module";
</pre>

            <p>
                Install the latest version of notherbase-fs package and get access to its features. 
            </p>
<pre class="code">
npm i notherbase-fs
</pre>

            <p>
                Create a yourBase.js file and use the code below to import notherbase-fs, 
                grab the local directory and initialize the server.
            </p>
<pre class="code">
import NotherBaseFS from "notherbase-fs";
import { fileURLToPath } from 'node:url';
const __dirname = fileURLToPath(new URL('./world', import.meta.url));
const yourBase = new NotherBaseFS(__dirname);
</pre>
            <p>
                Create a file named .env and provide the environment variables below.
                The PORT variable is needed for testing. Hosting platforms like Heroku
                may provide their own. The MONGODB_URI and SECRET variables are 
                needed to connect to a MongoDB database, which is needed for the 
                server to start. The NOREPLY and EMAILPW variables allow the server to
                send emails out with a Gmail account and an app-specific password.
            </p>
<pre class="code">
PORT=4567
MONGODB_URI="mongodb+srv://user:password@examplebase.compd.mongodb.net/examplebase?retryWrites=true&w=majority"
SECRET="somesecret"
NOREPLY="e@mail.com"
EMAILPW="dendfsmdy!dtut"
</pre>

            <h4>Running the Development Server</h4>
            <p>
                Start the server with node or nodemon(recommended).
            </p>
<pre class="code">
node yourBase.js
</pre>
<pre class="code">
nodemon yourBase.js
</pre>

            <h5>Loose git file is corrupt error?</h5>
<pre class="code">
find .git/objects/ -size 0 -exec rm -f {} \;
git fetch origin
</pre>
        </details>

        <details open>
            <summary><h3>notherbase-fs</h3></summary>

            <p>
                notherbase-fs is the engine running NotherBase. It is an npm package
                that includes basic content which enables testing. 
                Install in another package to create a simple server and database
                quickly.
            </p>

            <details>
                <summary><h5>class NotherBase</h5></summary>
  
                <article>
                    <details>
                        <summary>constructor(contentPath, globals = null, settings = {})</summary>
                        <article>
                            <div class="purpose">Starts a NotherBase server.</div>
                            <div class="input">
                                contentPath (String): The path to the base's content directory.
                            </div>
                            <div class="input">
                                globals (Object): An object of global variables that are attached to incoming requests
                                for use in server scripts.
                            </div>
                            <div class="input">
                                settings.siteTitle (String): The title of the site. Shows on tabs.
                            </div>
                            <div class="input">
                                settings.favicon (String): A file URL to the path of the favicon.
                            </div>
                        </article>
                    </details>
                </article>
            </details>

            <details>
                <summary><h5>Explorer</h5></summary>
                <p>
                    The server now needs some content. Create a new directory in your base's directory
                    and name it "world." 
                </p>

                <h6>The Front</h6>
                <p>
                    Create a new directory in the world directory
                    and name it "the-front." This is the region
                    where users who are not logged in can access
                    the base. Create a file named "index.ejs" in the new directory.
                    Insert the code below, save and restart the server.
                </p>
<pre class="code">
&lt;p&gt;Hello World&lt;/p&gt;
</pre>
                <p>
                    The content should now be available at http://localhost:PORT. Where PORT
                    should be the port number specified in the .env file. The "index.ejs" file created earlier gets inserted
                    automatically into the main element of the rendered html, so feel free to
                    add any styles, scripts or other elements that can go in an html main element.
                </p>
                <p>
                    Add more directories in /the-front to automatically create new routes.
                    The routes will automatically try to render contained "index.ejs" files. For example,
                    to add another page at http://localhost:PORT/example, create the file "/the-front/example/index.ejs".
                    Automatic route creation only goes one level deep, so /the-front/example/test would not
                    create a route.
                </p>

                <h6>Inside the Base</h6>
                <p>
                    Regions inside the base work similarly to the Front. The automatic route creation
                    follows this pattern: http://localhost:PORT/region/area/poi/detail. Only points of interest and details get
                    routes in regions, so for example these files will get automatic route creation: 
                </p>
                <p>
                    /a-region/some-area/old-poi/index.ejs as http://localhost:PORT/a-region/some-area/old-poi
                </p>
                <p>or</p>
                <p>
                    /a-region/some-area/old-poi/my-detail/index.ejs as http://localhost:PORT/a-region/some-area/old-poi/my-detail
                </p>
                <p>
                    Add these region directories at the same level as /the-front.
                </p>

                <h6>Context Passed to the EJS Renderer</h6>
<pre class="code">
let context = {
    userID: null,
    user: null,
    siteTitle: req.siteTitle,
    main: req.main,
    query: req.query,
    route: req.path,
    requireUser: req.lock
}

let user = await req.db.Spirit.recallOne("user",  null, { email: req.session.currentUser });
context.user = user;
</pre>
            </details>

            <details>
                <summary><h5>Pages and the Void</h5></summary>
                <p>
                    Add a /pages directory at the same level as /the-front. 
                    Create an "/void/index.ejs" directory and file in the void directory. This directory 
                    and others like it will automatically create the simple routes of http://localhost:PORT/name, 
                    where name is the name of the directory.
                </p>
                <p>
                    Creating this void page is very important, because attempts to access routes
                    that do not exist will redirect to http://localhost:PORT/void. It is also important
                    to note that for the /pages routes, the "index.ejs" files that get rendered are not
                    inserted into a main element (unlike regions and the-front) and so need to be full html documents.
                </p>
                <p>
                    These pages are not meant to be part of normal base navigation, but rather are
                    for one-off needed functionality with a short route. 
                </p>
            </details>

            <details>
                <summary><h5>Spirits</h5></summary> 

                <h6>What are Spirits?</h6>
                <p>
                    A spirit in NotherBase is a document in the database. A spirit
                    with no parent is a global spirit.
                </p>

                <article>
                    <details>
                        <summary>class Spirit</summary>

                        <article>
                            <details>
                                <summary>Static Properties</summary>
<pre class="code">
static db = mongoose.model('spirits', new mongoose.Schema({
    _lastUpdate: Number,
    service: String,
    parent: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: "spirits",
        required: false
    },
    data: {}
}));
</pre>
                            </details>
                            <details>
                                <summary>Constructor</summary>
<pre class="code">
constructor(memory = {}) {
    this.memory = {
        data: {},
        ...memory
    };
}
</pre>
                            </details>

                            <details>
                                <summary>static buildQuery = (service, data = null, parent = null, id = null) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Builds a query object to find a spirit in the database.
                                    </div>
                                    <div class="input">
                                        service (String): The name of the spirit.
                                    </div>
                                    <div class="input">
                                        data (Object): Data to match.
                                    </div>
                                    <div class="input">
                                        parent (ObjectId): The spirit's parent.
                                    </div>
                                    <div class="input">
                                        id (ObjectId): The exact spirit by id.
                                    </div>
                                    <div class="output">
                                        Returns: an object to use as input for Mongoose queries.
                                    </div>
                                </article>
                            </details>
    
                            <details>
                                <summary>static create = async (service, data = {}, parent = null) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Creates a spirit in the database.
                                    </div>
                                    <div class="input">
                                        service (String): The name of the spirit.
                                    </div>
                                    <div class="input">
                                        data (Object): Data to initialize with.
                                    </div>
                                    <div class="input">
                                        parent (ObjectId): The spirit's parent.
                                    </div>
                                    <div class="output">
                                        Returns: the spirit created.
                                    </div>
                                </article>
                            </details>

                            <details>
                                <summary>static recallAll = async (service, parent = null, data = {}, id = null) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Recalls all spirits of a given service in the database.
                                    </div>
                                    <div class="input">
                                        service (String): The name of the spirit.
                                    </div>
                                    <div class="input">
                                        parent (ObjectId): The spirit's parent.
                                    </div>
                                    <div class="input">
                                        data (Object): Data to match.
                                    </div>
                                    <div class="input">
                                        id (ObjectId): The exact spirit by id.
                                    </div>
                                    <div class="output">
                                        Returns: the spirits found.
                                    </div>
                                </article>
                            </details>

                            <details>
                                <summary>static recallOne = async (service, parent = null, data = {}, id = null) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Recalls a spirit in the database.
                                    </div>
                                    <div class="input">
                                        service (String): The name of the spirit.
                                    </div>
                                    <div class="input">
                                        data (Object): Data to match.
                                    </div>
                                    <div class="input">
                                        parent (ObjectId): The spirit's parent.
                                    </div>
                                    <div class="input">
                                        id (ObjectId): The exact spirit by id.
                                    </div>
                                    <div class="output">
                                        Returns: the spirit found or null.
                                    </div>
                                </article>
                            </details>

                            <details>
                                <summary>static recallOrCreateOne = async (service, parent = null, data = {}, id = null) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Recalls a spirit in the database.
                                    </div>
                                    <div class="input">
                                        service (String): The name of the spirit.
                                    </div>
                                    <div class="input">
                                        data (Object): Data to match.
                                    </div>
                                    <div class="input">
                                        parent (ObjectId): The spirit's parent.
                                    </div>
                                    <div class="input">
                                        id (ObjectId): The exact spirit by id.
                                    </div>
                                    <div class="output">
                                        Returns: the spirit found or a new spirit is created.
                                    </div>
                                </article>
                            </details>

                            <details>
                                <summary>static commit = async (data = this.memory.data) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Saves a document's updated data to the database.
                                    </div>
                                    <div class="input">
                                        data (Object): The data to overrride with.
                                    </div>
                                    <div class="output">
                                        Returns: "Updated"
                                    </div>
                                </article>
                            </details>

                            <details>
                                <summary>static delete = async (service, parent = null, data = {}, id = null) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Deletes spirits in the database.
                                    </div>
                                    <div class="input">
                                        service (String): The name of the spirit.
                                    </div>
                                    <div class="input">
                                        parent (ObjectId): The spirit's parent.
                                    </div>
                                    <div class="input">
                                        data (Object): Data to match.
                                    </div>
                                    <div class="input">
                                        id (ObjectId): The exact spirit by id.
                                    </div>
                                    <div class="output">
                                        Returns: the number of spirits deleted.
                                    </div>
                                </article>
                            </details>

                            <details>
                                <summary>normalizeDataToArray = () => {} </summary>
                                <article>
                                    <div class="purpose">
                                        Overrides the spirit's data object to an array if it isn't one.
                                    </div>
                            </details>

                            <details>
                                <summary>addBackup = (data, max = 5) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Adds a backup of the spirit's data to the spirit's backups. Then overrides
                                        the spirit's data object to the input data. Keeps max number of backups.
                                    </div>
                                    <div class="input">
                                        data (Object): The data to backup.
                                    </div>
                                    <div class="input">
                                        max (Number): The maximum number of backups to keep.
                                    </div>
                            </details>
                        </article>
                    </details>

                    <details>
                        <summary>class SendMail</summary>

                        <article>    
                            <details>
                                <summary>const passwordReset = async (toEmail, resetToken) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Sends an email with a password reset token.
                                    </div>
                                    <div class="input">
                                        toEmail (String): The email of the user.
                                    </div>
                                    <div class="input">
                                        resetToken (Number): The token that will be sent.
                                    </div>
                                    <div class="output">
                                        Returns: whatever the nodemailer transporter returns on sendMail.
                                    </div>
                                </article>
                            </details>

                            <details>
                                <summary>const send = async (toEmail, subject, html) => {}</summary>
                                <article>
                                    <div class="purpose">
                                        Sends an email.
                                    </div>
                                    <div class="input">
                                        toEmail (String): The email address to send to.
                                    </div>
                                    <div class="input">
                                        subject (String): The subject of the email.
                                    </div>
                                    <div class="input">
                                        html (String): The html of the email.
                                    </div>
                                    <div class="output">
                                        Returns: whatever the nodemailer transporter returns on sendMail.
                                    </div>
                                </article>
                            </details>
                        </article>
                    </details>
                </article>
            </details>

            <details>
                <summary><h5>Server Scripts and Database Access</h5></summary>
                
                <p>Use loadAll() to grab saved files from the specified spirit.</p>
<pre class="code">
base.loadAll(service).then((res) => {});
</pre>
                <p>
                    Many scripts need to be ran on the server to enable features like multiplayer
                    interaction and data security. Use base.do() to run "script-name.js", a file
                    that should be in the same directory as the current path.
                </p>
                <p>
                    Include route: "desired-path" in the data object to override the script's path.
                </p>
<pre class="code">
let res = await base.do("script-name", data);
</pre>

                <h6>Server Scripts</h6>
                <p>
                    Scripts that are run on the server should follow the format below
                    for compatibility.
                </p>
<pre class="code">
export default async (req, user, io) => {
    // Script code here
}
</pre>

                <h6>Database Access</h6>
                <p>
                    In your server script, recall a spirit in the database via its service,
                    parent, matching data or id. 
                </p>
<pre class="code">
export default async (req, user) => {
    let spirit = await req.db.Spirit.recallOne(service, parent = null, data = {}, id = null);
    await spirit.commit(req.body.newData);
}
</pre>
            </details>

            <details>
                <summary><h5>class Base</h5></summary>
                <p>
                    An object called "base" is included automatically in the render context, but not for 
                    standalone pages. Use base.loadAll(service, scope) to quickly grab the data from the 
                    specified service. Use .then(response) to avoid await at top-level.
                </p>

                <details>
                    <summary>Constructor</summary>
<pre class="code">
constructor() {}
</pre>
                    
                </details>

                <details>
                    <summary>static commune = async (route, data = null) => {}</summary>
                    <article>
                        <div class="purpose">
                            Sends a POST to the spirit world for "/s/user" functions.
                        </div>
                        <div class="input">
                            route (String): The user function you need to run.
                        </div>
                        <div class="input">
                            data (Object): Data sent in the POST body.
                        </div>
                        <div class="output">
                            Returns: the response object returned from the POST.
                        </div>
                    </article>
                </details>

                <details>
                    <summary>logout = async (test = false) => {}</summary>
                    <article>
                        <div class="purpose">Communes with the spirit world to compel the user to logout.</div>
                        <div class="input">
                            test (Boolean): If true, the user will be logged out, but the page won't reload.
                        </div>
                        <div class="output">Returns: response from communion.</div>
                    </article>
                </details>

                <details>
                    <summary>attemptRegister = async (email, username, password) => {}</summary>
                    <article>
                        <div class="purpose">Communes to create a new account.</div>
                        <div class="input">
                            email
                        </div>
                        <div class="input">
                            username
                        </div>
                        <div class="input">
                            password
                        </div>
                        <div class="output">
                            Returns: Response from communion.
                        </div>
                    </article>
                </details>

                <details>
                    <summary>attemptLogin = async (email, password) => {};</summary>
                    <article>
                        <div class="purpose">Communes to login.</div>
                        <div class="input">
                            email
                        </div>
                        <div class="input">
                            password
                        </div>
                        <div class="output">
                            Returns: Response from communion.
                        </div>
                    </article>
                </details>

                <details>
                    <summary>resetPassword = async (email, test = false) => {}</summary>
                    <article>
                        <div class="purpose">Communes to initiate a password reset.</div>
                        <div class="input">
                            email
                        </div>
                        <div class="input">
                            test: If true, an email will not be sent, but the reset token will print in the console.
                        </div>
                        <div class="output">
                            Returns: Response from communion.
                        </div>
                    </article>
                </details>

                <details>
                    <summary>changePassword = async (token, email, password, confirmation) => {}</summary>
                    <article>
                        <div class="purpose">Communes to change a user's password.</div>
                        <div class="input">
                            token
                        </div>
                        <div class="input">
                            email
                        </div>
                        <div class="input">
                            password
                        </div>
                        <div class="input">
                            confirmation
                        </div>
                        <div class="output">Returns: Response from communion.</div>
                    </article>
                </details>

                <details>
                    <summary>do = async (what, data = null) => {}</summary>
                    <article>
                        <div class="purpose">Runs a server script.</div>
                        <div class="input">
                            what (String): the script to run.
                        </div>
                        <div class="input">
                            data: input data passed to the sript that gets run. SEt data.route to override the script's path.
                        </div>
                        <div class="output">Returns: Response from the script that was run.</div>
                    </article>
                </details>

                <details>
                    <summary>loadAll = async (service, scope = "local", data = {}, id = null) => {}</summary>
                    <article>
                        <div class="purpose"></div>
                        <div class="input">
                            service (String): the name of the spirit to load
                        </div>
                        <div class="input">
                            scope (String): "local" or "global". Load the user's personal spirits or
                            the spirits shared by all users.
                        </div>
                        <div class="input">
                            data (Object): Data to match.
                        </div>
                        <div class="input">
                            id (ObjectId): The exact spirit by id.
                        </div>
                        <div class="output">Returns: the spirits that were found.</div>
                    </article>
                </details>

                <details>
                    <summary>load = async (service, scope = "local", data = {}, id = null) => {}</summary>
                    <article>
                        <div class="purpose">Loads a single spirit.</div>
                        <div class="input">
                            service (String): the name of the spirit to load
                        </div>
                        <div class="input">
                            scope (String): "local" or "global". Load the user's personal spirits or
                            the spirits shared by all users.
                        </div>
                        <div class="input">
                            data (Object): Data to match.
                        </div>
                        <div class="input">
                            id (ObjectId): The exact spirit by id.
                        </div>
                        <div class="output">Returns: the spirit that was found.</div>
                    </article>
                </details>
                
                <details>
                    <summary>createToggleViewButton = async () => {}</summary>
                    <article>
                        <div class="purpose">Creates a button that toggles the main element width.</div>
                    </article>
                </details>

                <details>
                    <summary>toggleView = async (save = true) => {} </summary>
                    <article>
                        <div class="purpose">Toggles the main element width.</div>
                        <div class="input">
                            save (Boolean): If true, the view state will be saved in the user's spirit.
                        </div>
                    </article>
                </details>
            </details>

            <details>
                <summary><h5>Chat Boxes</h5></summary>

                <p>
                    Easily add a chat box:
                </p>

<pre class="code">
&lt;div class="chat-box" id="element-id"&gt;&lt;/div&gt;
&lt;script src="/js/chat-box.js"&gt;&lt;/script&gt;
&lt;script&gt;
    let chat = new ChatBox("&lt;%= user.memory.data.username %&gt;", "element-id");
&lt;/script&gt;
</pre>

                <p>
                    The first input is the chatter's name, shown here using ejs to automatically
                    render the user's username. The second input must match the id of the element
                    with a class of "chat-box", like above.
                </p>
            </details>
        </details>


        <details open>
            <summary><h3>notherbase</h3></summary>

            <details>
                <summary><h5>Development Collaboration</h5></summary>
                
                <p>
                    Nother uses GitHub to store our code in the cloud and
                    Git for version control. Fork the NotherBase repository linked
                    below.
                </p>
                <a href="https://github.com/Mosshide/NotherBase">NotherBase GitHub Repository</a>
                <p>
                    Clone your fork to your computer locally.
                </p>
<pre class="code">
git clone https://github.com/You/YourFork.git
</pre>

                <p>
                    Enter the new directory and install all package dependencies.
                </p>
<pre class="code">
cd YourFork
npm i
</pre>

                <p>
                    Create a file named .env and insert the environment variables below.
                    Ask Wyatt for password details.
                </p>
<pre class="code">
PORT=4567
MONGODB_URI="mongodb+srv://genDev:password@notherbase.compd.mongodb.net/notherbase-test?retryWrites=true&w=majority"
SECRET="random"
NOREPLY="wyatt@notherbase.com"
EMAILPW=""
</pre>

                <p>
                    Make your changes then stage them, commit them and sync them to GitHub.
                    This is all easily done in the left side panel of VS Code. Use the commands below
                    if you need to do it in the terminal.
                </p>

<pre class="code">
gaa
gcsm "text describing your changes"
</pre>
<pre class="code">
git push
</pre>
                <p>
                    Git may get upset and require the details below - I don't know.
                </p>
<pre class="code">
git config --global user.email you@example.com
git config --global user.name “Your Name”
</pre>

                <p>
                    When you have changes that you would like to suggest go live,
                    create a new pull request for your fork on GitHub, from your
                    live branch to NotherBase's "beta" branch. We'll try to respond 
                    to it quickly, providing details if your code is rejected.
                </p>
            </details>

            <details>
                <summary><h5>Spirit of NotherBase</h5></summary>
                <p>This will detail the direction of design for NotherBase.</p>
            </details>
        </details>
    </main>

    <footer></footer>
</body>
</html>