<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>NotherBase Documentation</title>
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="/styles/main.css">
    <link rel="stylesheet" href="/styles/doc.css">
</head>

<body>
    <main>
        <h1>NotherBase Documentation</h1>

        <article>
            <h2>Table of Contents</h2>

            <section>
                <h3>notherbase-fs</h3>
                <ul>
                    <li>About</li>
                    <li>How to get started</li>
                    <li>Explorer</li>
                    <li>Pages and the Void</li>
                    <li>Server Scripts and Database Access</li>
                </ul>
            </section>

            <section>
                <h3>notherbase</h3>
                <ul>
                    <li>Spirit of NotherBase</li>
                    <li>Spirits in NotherBase</li>
                </ul>
            </section>
        </article>

        <article>
            <h2>notherbase-fs</h2>

            <section>
                <h4>About</h4>
                <p>
                    notherbase-fs is the engine running NotherBase. It is an npm package
                    that includes basic content which enables testing. 
                    Install in another package to create a simple server and database
                    quickly.
                </p>
            </section>

            <section>
                <h4>How to get started</h4>
                <p>
                    By installing notherbase-fs to an npm package, one can easily setup 
                    an Express.js server with automatic routes and a MongoDB connection.
                </p>

                <h4>Install notherbase-fs</h4>
                <p>
                    notherbase-fs uses ES Modules. Enusre the npm package type is "module."
                </p>
                <div class="code">
                    npm i notherbase-fs
                </div>
                <p>
                    Use the above code in the directory of your npm package in order
                    to install the latest version of notherbase-fs to your package.
                </p>

                <h4>Create a Base</h4>
                <p>
                    The code below imports notherbase-fs, grabs the local directory
                    and initializes the server. Insert it in the package's main file.
                </p>
                <div class="code">
                    import NotherBaseFS from "notherbase-fs";<br>
                    import { fileURLToPath } from 'node:url';<br>
                    const __dirname = fileURLToPath(new URL('./world', import.meta.url));<br>
                    const notherBaseFS = new NotherBaseFS(__dirname);
                </div>
                <p>
                    Create a file named .env and provide the environment variables below.
                    The PORT variable is needed for testing. Hosting platforms like Heroku
                    may provide their own. The MONGODB_URI and SECRET variables are 
                    needed to connect to a MongoDB database, which is needed for the 
                    server to start.
                </p>
                <div class="code">
                    PORT=4567<br>
                    MONGODB_URI="mongodb+srv://user:password@examplebase.compd.mongodb.net/examplebase?retryWrites=true&w=majority"<br>
                    SECRET="somesecret"
                </div>
            </section>

            <section>
                <h4>Explorer</h4>
                <p>
                    The server now needs some content. Create a new directory in the package directory
                    and name it "world." 
                </p>

                <h4>The Front</h4>
                <p>
                    Create a new directory in the world directory
                    and name it "the-front." This is the region
                    where users who are not logged in can access
                    the base. Create a file named "index.ejs" in the new directory.
                    Insert the code below, save and restart the server.
                </p>
                <div class="code">
                    &lt;p&gt;Hello World&lt;/p&gt;
                </div>
                <p>
                    The content should now be available at http://localhost:PORT. Where PORT
                    should be the port number specified in the .env file. It will automatically
                    redirect to http://localhost:PORT/the-front. The "index.ejs" file created earlier gets inserted
                    automatically into the body element of the rendered html, so feel free to
                    add any styles, scripts or other elements that can go in an html body.
                </p>
                <p>
                    Add more directories in /the-front to automatically create new routes.
                    The routes will automatically try to render "index.ejs" files. For example,
                    to add another page at http://localhost:PORT/the-front/example, create the file "/the-front/example/index.ejs".
                    Automatic route creation only goes one level deep, so /the-front/example/test would not
                    create a route.
                </p>

                <h4>Inside the Base</h4>
                <p>
                    Regions inside the base work similarly to the Front. The automatic route creation
                    follows this pattern: http://localhost:PORT/region/area/poi/detail. Points of interest and details get
                    routes, so for example these files will get automatically rendered: 
                    /a-region/some-area/old-poi/index.ejs or /a-region/some-area/old-poi/a-detail/index.ejs
                </p>
                <p>
                    Add these region directories at the same level as /the-front.
                </p>
            </section>

            <section>
                <h4>Pages and the Void</h4>
                <p>
                    Add a /pages directory at the same level as /the-front. 
                    Create an "/void/index.ejs" directory and file in the void directory. This directory 
                    and others like it will automatically create the simple routes of http://localhost:PORT/name, 
                    where name is the name of the directory.
                </p>
                <p>
                    Creating this void page is very important, because attempts to access routes
                    that do not exist will redirect to http://localhost:PORT/void. It is also important
                    to note that for the /pages routes, the "index.ejs" files that get rendered are not
                    inserted into an html body and so need to be full html documents.
                </p>
                <p>
                    These pages are not meant to be part of normal base navigation, but rather are
                    for one-off needed functionality with a short route. 
                </p>
            </section>

            <section>
                <h4>Server Scripts and Database Access</h4>

                <h5>base</h5>
                <p>
                    An object called "base" is included automatically in "the-front" and "world"
                    client renders. Use base.load() to quickly grab the data from the 
                    specified service. Use .then() to avoid await at top-level.
                </p>
                <div class="code">
                    base.load(service).then((res) => {});
                </div>
                <p>
                    Many scripts need to be ran on the server to enable features like multiplayer
                    interaction and data security. Use base.do() to run "script-name.js", a file
                    that should be in the same directory as the client render that's calling it.
                </p>
                <div class="code">
                    let res = await base.do("script-name", data);
                </div>

                <h5>Server Scripts</h5>
                <p>
                    Scripts that are run on the server should follow the format below
                    for compatibility.
                </p>
                <div class="code">
                    export default async (req, user) => {<br>
                    }
                </div>

                <h5>database Access</h5>
                <h6>What are Spirits?</h6>
                <p>
                    Technically, a spirit in NotherBase is a document in the database. In practice,
                    commune (use the notherbase-fs API) with a spirit (a Mongoose model) to receive 
                    its word (document data) and manifest it (process and render).
                </p>
                <p>
                    In your server script, recall a spirit in the database via its service,
                    parent, matching data and _id. 
                </p>
                <div class="code">
                        let spirit = await req.db.Spirit.recallOne(service, parent = null, data = {}, id = null);<br>
                        spirit.memory.data.items.push(req.body.data);<br>
                        await spirit.commit(data = null);<br>
                </div>
                <p>
                    In your server script, access special spirits and their useful functions
                    at req.db.*. The "user" parameter is actually an instance of the angel 
                    req.db.User, in which the player's spirit is already recalled. The 
                    user.offsetItem() function allows changes to be made to the player's 
                    inventory in a single line. Be sure the item name is spelled correctly.
                </p>
                <div class="code">
                    await user.offsetItem("Item Name", 1);<br><br>
                </div>
            </section>
        </article>

        <article>
            <h2>notherbase</h2>

            <section>
                <h3>Spirit of NotherBase</h3>
                <p>This will detail the direction of design for NotherBase.</p>

                <h4>Goals</h4>
                <h4>Major Products</h4>
                <h4>Aesthetic</h4>
            </section>

            <section>
                <h3>Spirits in NotherBase</h3>
                <p>
                    This will detail the direction of design for the various spirits 
                    in NotherBase.
                </p>

                <h4>Streams</h4>
                <h4>Games</h4>
            </section>
        </article>
    </main>

    <footer>
        
    </footer>
</body>

<script>
    
</script>

</html>