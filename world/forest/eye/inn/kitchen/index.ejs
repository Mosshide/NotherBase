<div class="fridge floatables">
    <div class="meta"></div>
</div>

<hr>

<a class="return" href="/forest/eye/inn/bar">
    Return to the Bar
</a>

<script src="/js/util/buttons.js"></script>
<script src="/js/util/search-box.js"></script>
<script src="/js/util/browser.js"></script>
<script src="/js/entity.js"></script>
<script src="/js/floatable.js"></script>
<script>
    const metaBrowser = new MetaBrowser({
        label: "Your Kitchen"
    });
    metaBrowser.addService("pantry", {
        fields: new NBField({
            name: "item",
            label: "Pantry Item: ",
            placeholder: "No Item",
            multiple: true
        }, [
            new NBField({
                name: "amount",
                placeholder: 1
            }, "number"),
            new NBField({
                name: "name",
                placeholder: "Item"
            }, "string"),
            new NBField({
                name: "expiration",
                label: "Expires: ",
                placeholder: Date.now()
            }, "date")
        ]),
        label: "Pantry",
        editable: true,
        multiple: true,
        toLoad: async () => {
            return await base.load("kitchen-pantry");
        },
        toSave: async (item, which, deleting) => {
            await base.do("save-kitchen", { item, which, deleting, part: "pantry" });
        }
    });
    metaBrowser.addService("freezer", {
        fields: new NBField({
            name: "item",
            label: "Freezer Item: ",
            placeholder: "No Item",
            multiple: true
        }, [
            new NBField({
                name: "amount",
                placeholder: 1
            }, "number"),
            new NBField({
                name: "name",
                placeholder: "Item"
            }, "string"),
            new NBField({
                name: "expiration",
                label: "Expires: ",
                placeholder: Date.now()
            }, "date")
        ]),
        label: "Freezer",
        editable: true,
        multiple: true,
        toLoad: async () => {
            return await base.load("kitchen-freezer");
        },
        toSave: async (item, which, deleting) => {
            await base.do("save-kitchen", { item, which, deleting, part: "freezer" });
        }
    });
    metaBrowser.addService("meats", {
        fields: new NBField({
            name: "item",
            label: "Meat: ",
            placeholder: "No Item",
            multiple: true
        }, [
            new NBField({
                name: "amount",
                placeholder: 1
            }, "number"),
            new NBField({
                name: "name",
                placeholder: "Item"
            }, "string"),
            new NBField({
                name: "expiration",
                label: "Expires: ",
                placeholder: Date.now()
            }, "date")
        ]),
        label: "Meats",
        editable: true,
        multiple: true,
        toLoad: async () => {
            return await base.load("kitchen-meats");
        },
        toSave: async (item, which, deleting) => {
            await base.do("save-kitchen", { item, which, deleting, part: "meats" });
        }
    });
    metaBrowser.addService("veggies", {
        fields: new NBField({
            name: "item",
            label: "Veggie: ",
            placeholder: "No Item",
            multiple: true
        }, [
            new NBField({
                name: "amount",
                placeholder: 1
            }, "number"),
            new NBField({
                name: "name",
                placeholder: "Item"
            }, "string"),
            new NBField({
                name: "expiration",
                label: "Expires: ",
                placeholder: Date.now()
            }, "date")
        ]),
        label: "Veggies",
        editable: true,
        multiple: true,
        toLoad: async () => {
            return await base.load("kitchen-veggies");
        },
        toSave: async (item, which, deleting) => {
            await base.do("save-kitchen", { item, which, deleting, part: "veggies" });
        }
    });
    metaBrowser.addService("drinks", {
        fields: new NBField({
            name: "item",
            label: "Drink: ",
            placeholder: "No Item",
            multiple: true
        }, [
            new NBField({
                name: "amount",
                placeholder: 1
            }, "number"),
            new NBField({
                name: "name",
                placeholder: "Item"
            }, "string"),
            new NBField({
                name: "expiration",
                label: "Expires: ",
                placeholder: Date.now()
            }, "date")
        ]),
        label: "Drinks",
        editable: true,
        multiple: true,
        toLoad: async () => {
            return await base.load("kitchen-drinks");
        },
        toSave: async (item, which, deleting) => {
            await base.do("save-kitchen", { item, which, deleting, part: "drinks" });
        }
    });
    metaBrowser.addService("snacks", {
        fields: new NBField({
            name: "item",
            label: "Snack: ",
            placeholder: "No Item",
            multiple: true
        }, [
            new NBField({
                name: "amount",
                placeholder: 1
            }, "number"),
            new NBField({
                name: "name",
                placeholder: "Item"
            }, "string"),
            new NBField({
                name: "expiration",
                label: "Expires: ",
                placeholder: Date.now()
            }, "date")
        ]),
        label: "Snacks",
        editable: true,
        multiple: true,
        toLoad: async () => {
            return await base.load("kitchen-snacks");
        },
        toSave: async (item, which, deleting) => {
            await base.do("save-kitchen", { item, which, deleting, part: "snacks" });
        }
    });
    metaBrowser.addService("other", {
        fields: new NBField({
            name: "item",
            label: "Item: ",
            placeholder: "No Item",
            multiple: true
        }, [
            new NBField({
                name: "amount",
                placeholder: 1
            }, "number"),
            new NBField({
                name: "name",
                placeholder: "Item"
            }, "string"),
            new NBField({
                name: "expiration",
                label: "Expires: ",
                placeholder: Date.now()
            }, "date")
        ]),
        label: "Other",
        editable: true,
        multiple: true,
        toLoad: async () => {
            return await base.load("kitchen-other");
        },
        toSave: async (item, which, deleting) => {
            await base.do("save-kitchen", { item, which, deleting, part: "other" });
        }
    });

    const floatBoard = new FloatBoard();
</script>