<link rel="stylesheet" href="/styles/browser.css">
<style>
    <%- include("./wizard-tower.css"); %>
</style>

<p>
    The tower stands before you, wooden door locked.
</p>

<div class="tower">
    <div class="floatables">
        <div class="browser" id="tower"></div>
        <div class="search-box" id="tower"></div>
        <div class="meta buttons" id="tower"></div>
    </div>

    <div id="cover"></div>
</div>

<p>
    "Blessed is the one who reads aloud the words of this prophecy, 
    hears it and takes to heart what is written in it, because the 
    time is near," is inscribed on the marble tablet embedded in 
    the center of the door.
</p>

<p id="extra"></p>

<hr>

<button class="to" id="knock">
    Knock on the Tower's Door
</button>

<hr>

<a class="to" href="/forest/eye/filter/yard">
    Go to Layla and Wyatt's Place
</a>

<a class="to" href="/forest/eye/filter/pond">
    Go to the Pond
</a>

<a class="to" href="/forest/eye/town-hall">
    Go to the Town Hall
</a>

<hr>

<a class="return" href="/forest/eye/school">
    Return to the School
</a>

<a class="return" href="/forest/eye/inn">
    Return to the Inn
</a>

<script src="/js/util/buttons.js"></script>
<script src="/js/util/search-box.js"></script>
<script src="/js/util/browser.js"></script>
<script src="/js/entity.js"></script>
<script src="/js/floatable.js"></script>
<script>
    $("#knock").on("click", function knock() {
        $("#extra").text("You knocked on the tower's door. Surely you've been heard.");
        $("#knock").toggleClass("invisible");
    });

    <% if (user.authLevels.includes("Creator")) { %>
        $("#knock").toggleClass("invisible");
        $("#cover").toggleClass("invisible");
        $(".floor button#toggle").on("click", function (e) {
            $(e.target.parentElement).find(".content").toggleClass("invisible");
        });

        const browser = new Browser("tower");
        const search = new SearchBox("tower");

        const metaTower = new MetaBrowser("tower", browser, search, "Tower");
        metaTower.addService("items", {
            fields: new NBField({
                name: "item",
                label: "Item: ",
                placeholder: "No item",
                multiple: true
            }, [
                new NBField({
                    name: "name",
                    label: "Name: ",
                    placeholder: "Name"
                }, "string"),
                new NBField({
                    name: "short",
                    label: "Short Description: ",
                    placeholder: "No Description"
                }, "string"),
                new NBField({
                    name: "long",
                    label: "Long Description: ",
                    placeholder: "No Description"
                }, "long-string"),
                new NBField({
                    name: "id",
                    placeholder: null,
                    hidden: true
                }, "string")
            ]),
            label: "Items",
            editable: true,
            multiple: true,
            toLoad: async () => {
                let res = await base.do("get-items");
                console.log(res);
                return res.data;
            },
            toSave: async (item, which, settings = { delete: false }) => {
                await base.do("save-item", { item, which, delete: settings.delete  });
            }
        });
        metaTower.addService("users", {
            fields: new NBField({
                name: "user",
                label: "User: ",
                placeholder: "No user",
                multiple: true
            }, [
                new NBField({
                    name: "username",
                    label: "Username: ",
                    placeholder: "No Username"
                }, "string"),
                new NBField({
                    name: "authLevels",
                    label: "Auth Levels: ",
                    placeholder: "No Auth",
                    multiple: true
                }, "string"),
                new NBField({
                    name: "email",
                    label: "Email: ",
                    placeholder: "No Email"
                }, "string"),
                new NBField({
                    name: "id",
                    placeholder: null,
                    hidden: true
                }, "string")
            ]),
            label: "Users",
            editable: true,
            multiple: true,
            toLoad: async () => {
                let res = await base.do("get-users");
                return res.data;
            },
            toSave: async (item, which, del) => {
                await base.do("save-user", { item, which, delete: del });
            }
        });
    <% } %>
</script>