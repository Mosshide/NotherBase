<style>
    <%- include("./backyard.css"); %>
    <%- include("./index.css"); %>
    <%- include("./wallet.css"); %>
</style>

<div class="floor porch">
    <h4>The Porch</h4>

    <p>
        On the porch sit two odd-looking cats who watch the steps
        you take as you walk by.
    </p>

    <div class="basic">
        A mailbox with the name "Sushinsky" on it.
    </div>

    <div class="dialogue" id="berry">
        <div class="frame">
            <img src="/img/npcs/berry.png" class="portrait">
        </div>
        <div class="heart"></div>
        <div class="content">
        </div>
    </div>
    
    <div class="dialogue" id="zerry">
        <div class="frame">
            <img src="/img/npcs/zerry.png" class="portrait">
        </div>
        <div class="heart"></div>
        <div class="content">
        </div>
    </div>
</div>

<div class="house">
    <div class="floor livingroom">
        <h4>Livingroom</h4>

        <div class="closet">
            <h6>H1 Tavern Lobby</h6>
        
            <div class="search">
                <h4>Search h4</h4>
                <input type="text" placeholder="search">
                <h5>Selector List h5</h5>
                <ul class="selector">
                    <li id="0" onclick="selectItem(this)">A basic li</li>
                    <li id="1" onclick="selectItem(this)">A basic li</li>
                    <li id="2" onclick="selectItem(this)">A basic li</li>
                    <li id="3" onclick="selectItem(this)">A basic li</li>
                    <li id="4" onclick="selectItem(this)">A basic li</li>
                    <li id="5" onclick="selectItem(this)">A basic li</li>
                    <li id="6" onclick="selectItem(this)">A basic li</li>
                    <li id="7" onclick="selectItem(this)">A basic li</li>
                    <li id="8" onclick="selectItem(this)">A basic li</li>
                    <li id="9" onclick="selectItem(this)">A basic li</li>
                    <li id="10" onclick="selectItem(this)">A basic li</li>
                    <li id="11" onclick="selectItem(this)">A basic li</li>
                </ul>
            </div>

            <div class="door">
                <div class="knob" onclick="openCloset()"></div>
            </div>
        </div>

        <div class="bookshelf">
            <div class="shelf">
        
            </div>
            <hr>
            <div class="shelf">
                
            </div>
            <hr>
            <div class="shelf">
                
            </div>
        </div>

        <img class="painting" src="/img/misc/stake.png">

        <div class="basic end-table">
            A small table.
        </div>
    </div>
    
    <div class="floor laylas-room">
        <h4>Layla's Room</h4>

        <div class="billboard" id="layla-skills">
            <h5>My Skills</h5>
        </div>

        <div class="basic">
            A flat-screen television.
        </div>
    
        <article>
            <h3>Toy Box</h3><hr>
            <%- include("./toy-box.ejs"); %>
        </article>
    </div>
    
    <div class="floor upstairs">
        <h4>Upstairs</h4>

        <div class="billboard" id="today">
            <h5>To Do Today</h5>
        </div>
        
        <div class="billboard" id="week">
            <h5>To Do This Week</h5>
        </div>
        
        <div class="billboard" id="month">
            <h5>To Do This Month</h5>
        </div>
        
        <div class="billboard" id="year">
            <h5>To Do This Year</h5>
        </div>
        
        <div class="wallet conchu invisible">
            <h4>Your Wallet</h4>
            <div class="summary">
                <div class="spending">
                    <h5>Spending Money Left</h5>
                    <h6 id="week">This Week: $0</h6>
                    <h6 id="month">This Month: $0</h6>
                    <input type="text" id="item"><input type="number" id="spend"><button onclick="">Spend</button>
                </div>
                <div class="flow">
                    <h5>Cash Flow Last Month</h5>
                    <h6 id="income">Made: $0</h6>
                    <h6 id="expenses">Spent: $0</h6>
                    <h6 id="saved">Saved: $0</h6>
                </div>
            </div>
            <div class="settings invisible">
            </div>
            <button onclick="wallet.toggleView()">$$</button>
        </div>
    </div>
</div>


<div class="yard">
    <div class="sky">
        <h4>The Yard</h4>
        
        <div class="ray"></div>
        <div class="ray"></div>
        <div class="ray"></div>
        <div class="ray"></div>
        <div class="ray"></div>
        <div class="sun"></div>
    </div>

    <div class="ground">
        <div class="tree">
            <div class="leaves"></div>
            <div class="trunk"></div>
        </div>
        <div class="weed">
            <div class="leaf"></div>
            <div class="leaf"></div>
            <div class="leaf"></div>
        </div>
    </div>
</div>

<hr>

<a class="to" href="/forest/eye/filter/tree-house">
    Walk up to Tree House
</a>

<hr>

<a class="to" href="/forest/eye/filter/cave">
    Go to Cave
</a>

<a class="to" href="/forest/eye/filter/tower">
    Go to the Tower
</a>

<a class="to" href="/forest/eye/keep">
    Go to the Keep
</a>

<hr>

<a class="return" href="/forest/eye/library">
    Return to the Library
</a>

<a class="return" href="/forest/eye/church">
    Return to the Church
</a>

<script src="/js/dialogue.js"></script>
<script src="/js/billboard.js"></script>
<script>
    //npc dialogues
    let berryDialogue = new Dialogue("berry", 3900, (self) => {
        if (Dialogue.checkGlobalFlag("longTalkWithBerry")) {
            return [
                Dialogue.createTextSlide(1, `That was my answer too! But nooo....`)
            ];
        }
        else if (self.checkFlag("accepted")) {
            return [
                Dialogue.createTextSlide(3, `If a portal approached a cube at a certain velocity,
                                             would the cube receive that velocity after completely passing through the portal?`),
                Dialogue.createButtonSlide(3, [
                    Dialogue.createButton("Yes.", "longTalkWithBerry", true),
                    Dialogue.createButton("No.", "longTalkWithBerry", true)
                ])
            ];
        }
        else if (self.checkFlag("declined")) {
            return [
                Dialogue.createTextSlide(2, "Wow. I honestly didn't expect you to decline like that."),
                Dialogue.createTextSlide(10, "To each their own I guess.")
            ];
        }
        else if (self.checkFlag("responded")) {
            return [
                Dialogue.createTextSlide(2, "Great, I got your attention! Not many people come around here."),
                Dialogue.createTextSlide(2, "Would you mind settling a debate I'm having with my acquaintance below?"),
                Dialogue.createButtonSlide(3, [
                    Dialogue.createButton("Sure.", "accepted"),
                    Dialogue.createButton("No Way.", "declined")
                ])
            ];
        }
        else {
            return [
                Dialogue.createTextSlide(2, "Hey! Yeah, it's the talking cat on the porch!"),
                Dialogue.createButtonSlide(3, [
                    Dialogue.createButton("Hi!", "responded"),
                    Dialogue.createButton("Hi?", "responded")
                ]),
                Dialogue.createTextSlide(1, "Hello?"),
                Dialogue.createButtonSlide(3, [
                    Dialogue.createButton("Hi!", "responded"),
                    Dialogue.createButton("Hi?", "responded")
                ])
            ];
        }
    });

    let zerryDialogue = new Dialogue("zerry", 4000, (self) => {
        if (self.checkFlag("responded")) {
            return [
                Dialogue.createTextSlide(1, "Nice to meet you!"),
                Dialogue.createTextSlide(10, "I don't know what else to say...")
            ];
        }
        else if (Dialogue.checkGlobalFlag("longTalkWithBerry")) {
            return [
                Dialogue.createTextSlide(1, "I see you're not interested in talking to me...")
            ];
        }
        else {
            return [
                Dialogue.createTextSlide(3, "..."),
                Dialogue.createTextSlide(1, "Hello. My name is Zerry."),
                Dialogue.createButtonSlide(2, [
                    Dialogue.createButton("Hello.", "responded")
                ]),
                Dialogue.createTextSlide(1, "Hello?"),
                Dialogue.createButtonSlide(5, [
                    Dialogue.createButton("Hello.", "responded")
                ])
            ];
        }
    });

    //livingroom
    const openCloset = function openCloset() {
        $(".closet .door").addClass("invisible");
    }

    //backyard harvest game
    class HarvestGame {
        #Tree = class Tree {
            constructor($OGtree, $ground) {
                this.$div = $OGtree.clone();
                this.$leaves = this.$div.find(".leaves");
                this.$trunk = this.$div.find(".trunk");
                this.cut = false;
                this.maxYield = 5;
                this.age = 0;
                this.timeToGrow = 100000;
                this.clicksToDie = 10;
                this.maxWidth = 200;
                this.maxHeight = 300;
                this.position = [Math.floor(Math.random() * 100), Math.floor(Math.random() * 100)];

                $ground.append(this.$div);
                this.$div.css("display", "initial");
                this.updateCSS();

                this.$trunk.on("click", this.click);
            }

            click = () => {
                this.clicksToDie--;
                this.$trunk.addClass("shake");
                this.$leaves.addClass("shake");
                this.$trunk[0].addEventListener('animationend', () => {
                    this.$trunk.removeClass("shake");
                    this.$leaves.removeClass("shake");
                });

                if (this.clicksToDie <= 0) {
                    this.$div.remove();
                    this.cut = true;
                }
            }

            update(delta) {
                this.age += delta;
                if (this.age >= this.timeToGrow) this.age = this.timeToGrow;

                this.updateCSS();
            }
            
            updateCSS() {
                let size = this.age / this.timeToGrow;
                if (size > 1) size = 1;
                this.$div.css("width", `${size * this.maxWidth}px`);
                this.$div.css("height", `${size * this.maxHeight}px`);

                this.$div.css("left", `calc(${this.position[0]}% - ${size * this.maxWidth / 2}px)`);
                this.$div.css("bottom", `${this.position[1] - 5}%`);
                this.$div.css("z-index", (100 - this.position[1]) + 25);
            }
        }

        #Weed = class Weed {
            constructor($OGweed, $ground) {
                this.$div = $OGweed.clone();
                this.$leaves = this.$div.find(".leaf");
                this.cut = false;
                this.age = 0;
                this.timeToGrow = 100;
                this.maxWidth = 20;
                this.maxHeight = 30;

                $ground.append(this.$div);
                this.$div.css("display", "initial");
                this.$div.css("left", `${Math.floor(Math.random() * 110) - 5}%`);
                let z = Math.floor(Math.random() * 100) - 5;
                this.$div.css("bottom", `${z}%`);
                this.$div.css("z-index", (100 - z) + 25);
                this.updateCSS();

                this.$leaves.on("click", this.click);
            }

            click = () => {
                this.$div.remove();

                this.cut = true;
            }

            update(delta) {
                this.age += delta;

                this.updateCSS();
            }
            
            updateCSS() {
                let size = this.age / this.timeToGrow;
                if (size > 1) size = 1;
                this.$div.css("width", `${size * this.maxWidth}px`);
                this.$div.css("height", `${size * this.maxHeight}px`);
            }
        }

        constructor() {
            this.$ground = $(".ground");
            this.$OGtree = $(".tree");
            this.$OGweed = $(".weed");
            this.$OGtree.css("display", "none");
            this.$OGweed.css("display", "none");
            this.trees = [];
            this.maxTrees = 10;
            this.weeds = [];
            this.maxWeeds = 100;
            this.fps = 5;
            setInterval(this.update, 1000 / this.fps);
        }

        update = () => {
            this.checkForCuts();
            this.attemptSpawn();
            this.updateGrowth(1000 / this.fps);
        }

        checkForCuts() {
            for (let i = 0; i < this.trees.length; i++) {
                if (this.trees[i].cut) {
                    this.trees.splice(i, 1);
                    base.do("cut-tree");
                }
            }

            for (let i = 0; i < this.weeds.length; i++) {
                if (this.weeds[i].cut) {
                    this.weeds.splice(i, 1);
                    base.do("pull-weed");
                }
            }
        }

        attemptSpawn() {
            if (Math.floor(Math.random() * 10) < 3) {
                if (this.trees.length < this.maxTrees) {
                    let newTree = new this.#Tree(this.$OGtree, this.$ground);

                    this.trees.push(newTree);
                }
            }
            else if (Math.floor(Math.random() * 10) < 3) {
                if (this.weeds.length < this.maxWeeds) {
                    let newWeed = new this.#Weed(this.$OGweed, this.$ground);

                    this.weeds.push(newWeed);
                }
            }
        }

        updateGrowth(delta) {
            for (let i = 0; i < this.trees.length; i++) {
                this.trees[i].update(delta);
            }

            for (let i = 0; i < this.weeds.length; i++) {
                this.weeds[i].update(delta);
            }
        }
    }
    let harvestGame = new HarvestGame();

    //layla widgets
    let lSkills, lToDo, lRecipes = null;

    base.load("layla-skills").then((res) => {
        lSkills = new Billboard("layla-skills", res.items, { onSave: "save-layla" });
    });

    //upstairs widgets
    let today, week, month, year = null;

    base.load("todo-today").then((res) => {
        today = new Billboard("today", res.items, { onSave: "save-todo" });
    });

    base.load("todo-week").then((res) => {
        week = new Billboard("week", res.items, { onSave: "save-todo" });
    });

    base.load("todo-month").then((res) => {
        month = new Billboard("month", res.items, { onSave: "save-todo" });
    });

    base.load("todo-year").then((res) => {
        year = new Billboard("year", res.items, { onSave: "save-todo" });
    });

    <%- include("./wallet.js") %>
</script>