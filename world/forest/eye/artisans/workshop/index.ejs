<div class="floatables">
    <div class="meta"></div>
</div>

<hr>

<a class="to" href="/forest/eye/artisans">
    Exit the Workshop
</a>

<script src="/js/util/element.js"></script>
<script src="/js/util/buttons.js"></script>
<script src="/js/util/search-box.js"></script>
<script src="/js/util/browser.js"></script>
<script src="/js/entity.js"></script>
<script src="/js/floatable.js"></script>
<script>
    class TreeBrowser extends Browser {
        constructor(serving, settings) {
            super(serving, settings);
            
            this.buttons.enableButton("delete", (e, self) => { this.attemptDelete(); });
            this.buttons.enableButton("save", (e, self) => { this.save(); });
            this.buttons.enableButton("cancel", (e, self) => { this.read(this.serving, false); });
            this.buttons.enableButton("edit", (e, self) => { this.edit(); });
            this.buttons.addButton(new Button("up", (e, self) => {
                this.up();
            }, { placeholder: "Up" }));
            this.buttons.addButton(new Button("top", (e, self) => {
                this.top();
            }, { placeholder: "Top" }));
            this.buttons.hideButton();

            this.childButtons = this.addChild(new Buttons({ id: "child-buttons" }));
        }

        attemptDelete = () => {
            this.buttons.buttons.delete.$div.empty();
            this.buttons.buttons.delete.disable();

            this.lastAttempt = Date.now();

            this.$cancel = $(`<button id="cancel-delete">Cancel</button>`).appendTo(this.buttons.buttons.delete.$div);
            this.$cancel.on("click", (e) => {
                this.cancelDelete();
                e.stopPropagation();
            });

            this.$confirm = $(`<button id="confirm-delete">Confirm Delete</button>`).appendTo(this.buttons.buttons.delete.$div);
            this.$confirm.on("click", (e) => {
                if (Date.now() - this.lastAttempt > 1000) {
                    this.delete();
                    e.stopPropagation();
                }
            });
        }

        delete = async () => {
            if (this.serving.itemLocation.length === 0) {
                if (this.settings.onDelete) this.settings.onDelete();
                this.close();
            }
            else {
                let index = this.serving.itemLocation[this.serving.itemLocation.length - 1];
                this.up();
                let item = this.getItemNode();
                item.children.splice(index, 1);
                this.save();
            }
        }

        save = async () => {
            let node = this.getItemNode();
            node.data = this.box.getValue();
            this.serving.data[this.serving.selected].name = this.serving.data[this.serving.selected].data.name;
            
            if (this.settings.onSave) this.settings.onSave(this.serving.data[this.serving.selected]);

            this.read(this.serving, false);
        }

        read = (serving = this.serving, resetLocation = true) => {
            this.serving = serving;
            this.serving.state = "read";
            if (resetLocation) this.serving.itemLocation = [];

            this.cancelDelete();

            if (this.box) this.box.close();
            this.box = this.addChild(new ViewBox());

            let item = this.getItemNode();
            this.box.setValue(item.data, this.serving.fields, false);

            this.buttons.showButton("close");
            if (this.serving.itemLocation.length > 1) this.buttons.showButton("up");
            else this.buttons.hideButton("up");
            if (this.serving.itemLocation.length > 0) this.buttons.showButton("top");
            else this.buttons.hideButton("top");
            this.buttons.hideButton("save");
            this.buttons.hideButton("cancel");
            
            if (this.serving.editable) {
                this.buttons.showButton("edit");
                this.buttons.showButton("delete");
            }
            else this.buttons.hideButton("edit");

            this.childButtons.closeChildren();
            if (!Array.isArray(item.children)) item.children = [];
            for (let i = 0; i < item.children.length; i++) {
                let child = item.children[i];
                let button = this.childButtons.addButton(new Button(child.data.name, (e, self) => {
                    this.down(i);
                }, { placeholder: child.data.name }));
            }
            this.newChild = this.childButtons.addButton(new Button("new", (e, self) => {
                this.newNode();
            }, { placeholder: "New" }));
        }  

        new = (serving = this.serving, itemOverride = null) => {
            this.serving = serving;
            this.serving.state = "new";

            if (this.box) this.box.close();
            this.box = this.addChild(new ViewBox());
            this.serving.itemLocation = [];
            this.box.setValue(itemOverride ? itemOverride : {}, this.serving.fields, true);

            this.buttons.hideButton("edit");
            this.buttons.showButton("close");
            this.buttons.showButton("save");
            this.buttons.showButton("cancel");
            this.buttons.hideButton("delete");
            if (this.serving.itemLocation.length > 1) this.buttons.showButton("up");
            else this.buttons.hideButton("up");
            if (this.serving.itemLocation.length > 0) this.buttons.showButton("top");
            else this.buttons.hideButton("top");
        }

        newNode = () => {
            let item = this.getItemNode();
            if (!Array.isArray(item.children)) item.children = [];
            item.children.push({
                data: {
                    name: "New Node"
                },
                children: []
            });
            this.down(item.children.length - 1);
        }

        edit = (serving = this.serving, itemOverride = null) => {
            this.serving = serving;
            this.serving.state = "edit";
            
            if (this.box?.$div) this.box.close();
            this.box = this.addChild(new ViewBox(), false, true);
            this.box.setValue(itemOverride ? itemOverride : this.getItemNode().data, this.serving.fields, true);

            this.buttons.hideButton("edit");
            this.buttons.hideButton("close");
            this.buttons.showButton("save");
            this.buttons.showButton("cancel");
            this.buttons.hideButton("delete");
            if (this.serving.itemLocation.length > 1) this.buttons.showButton("up");
            else this.buttons.hideButton("up");
            if (this.serving.itemLocation.length > 0) this.buttons.showButton("top");
            else this.buttons.hideButton("top");

            if (this.settings.onEdit) this.settings.onEdit();
        }
        
        getItemNode = () => {
            if (!Array.isArray(this.serving.itemLocation)) this.serving.itemLocation = [];
            let item = this.serving.data[this.serving.selected];
            for (let i = 0; i < this.serving.itemLocation.length; i++) {
                item = item.children[this.serving.itemLocation[i]];
            }
            return item;
        }

        up = () => {
            if (this.serving.itemLocation.length > 0) {
                this.serving.itemLocation.pop();
                this.read(this.serving, false);
            }
        }

        top = () => {
            this.read();
        }

        down = (index) => {
            this.serving.itemLocation.push(index);
            this.read(this.serving, false);
        }
    }

    const metaBrowser = new MetaBrowser({
        header: "Your Projects",
        useBrowser: TreeBrowser
    });
    metaBrowser.addService("projects", {
        fields: new NBField({
            name: "project-node",
            placeholder: "No Info",
            label: "Node: "
        }, [
            new NBField({
                name: "name",
                placeholder: "No Name",
                label: "Name: ",
                type: "string"
            }),
            new NBField({
                name: "description",
                placeholder: "No Description",
                label: "Description: ",
                type: "long-string",
                multiple: true
            })
        ]),
        editable: true,
        multiple: true,
        toLoad: async () => {
            return await base.loadAll("projects");
        },
        toSave: async (item, deleting) => {
            await base.do("save-project", { item, deleting });
        }
    });
    metaBrowser.render();

    const floatBoard = new FloatBoard();
</script>