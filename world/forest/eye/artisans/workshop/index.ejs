<div class="floatables">
    <div class="meta"></div>
</div>

<hr>

<a class="to" href="/forest/eye/artisans">
    Exit the Workshop
</a>

<script src="/js/util/element.js"></script>
<script src="/js/util/buttons.js"></script>
<script src="/js/util/search-box.js"></script>
<script src="/js/util/browser.js"></script>
<script src="/js/entity.js"></script>
<script src="/js/floatable.js"></script>
<script>
    class TreeBrowser extends Browser {
        constructor(serving, settings) {
            super(serving, settings);
            
            this.buttons.addButton(new Button("up", (e, self) => {
                this.up();
            }, { placeholder: "Up" }));
            this.buttons.addButton(new Button("top", (e, self) => {
                this.top();
            }, { placeholder: "Top" }));
            this.buttons.hideButton();

            this.childButtons = this.addChild(new Buttons());
        }

        save = async () => {
            if (this.serving.state === "edit" || this.serving.state === "new") {
                let node = this.getItemNode();
                node = this.box.getValue();
                
                if (this.settings.onSave) this.settings.onSave(this.item);

                this.read();
            }
        }

        read = (serving = this.serving) => {
            this.serving = serving;
            this.serving.state = "read";

            this.cancelDelete();

            if (this.box) this.box.close();
            this.box = this.addChild(new ViewBox());

            let item = this.getItemNode();
            this.box.setValue(item, this.serving.fields, false);

            this.buttons.showButton("close");
            this.buttons.hideButton("save");
            this.buttons.hideButton("cancel");
            
            if (this.serving.editable) {
                this.buttons.showButton("edit");
                this.buttons.showButton("delete");
            }
            else this.buttons.hideButton("edit");

            this.childButtons.removeChildren();
            for (let i = 0; i < item.length; i++) {
                const element = array[i];
                
            }
        }  

        new = (serving = this.serving, itemOverride = null) => {
            this.serving = serving;
            this.serving.state = "new";

            if (this.box) this.box.close();
            this.box = this.addChild(new ViewBox());
            this.item = itemOverride ? itemOverride : null;
            this.serving.itemLocation = [];
            this.box.setValue(this.getItemNode(), this.serving.fields, true);

            this.buttons.hideButton("edit");
            this.buttons.showButton("close");
            this.buttons.showButton("save");
            this.buttons.showButton("cancel");
            this.buttons.hideButton("delete");
        }

        edit = (serving = this.serving, itemOverride = null) => {
            this.serving = serving;
            this.serving.state = "edit";
            
            if (this.box?.$div) this.box.close();
            this.box = this.addChild(new ViewBox(), false, true);
            this.box.setValue(itemOverride ? itemOverride : this.getItemNode(), this.serving.fields, true);

            this.buttons.hideButton("edit");
            this.buttons.hideButton("close");
            this.buttons.showButton("save");
            this.buttons.showButton("cancel");
            this.buttons.hideButton("delete");

            if (this.settings.onEdit) this.settings.onEdit();
        }
        
        getItemNode = () => {
            if (!Array.isArray(this.serving.itemLocation)) this.serving.itemLocation = [];
            let item = this.serving.data[this.serving.selected];
            for (let i = 0; i < this.serving.itemLocation.length; i++) {
                item = item[this.serving.itemLocation[i]];
            }
            return item;
        }

        up = () => {
            if (this.serving.itemLocation.length > 0) {
                this.serving.itemLocation.pop();
                this.read();
            }
        }

        top = () => {
            this.serving.itemLocation = [];
            this.read();
        }

        down = (index) => {
            this.serving.itemLocation.push(index);
            this.read();
        }
    }

    const metaBrowser = new MetaBrowser({
        header: "Your Projects",
        useBrowser: TreeBrowser
    });
    metaBrowser.addService("projects", {
        fields: new NBField({
            name: "project-node",
            placeholder: "No Info",
            label: "Node: "
        }, [
            new NBField({
                name: "name",
                placeholder: "No Name",
                label: "Name: ",
                type: "string"
            }),
            new NBField({
                name: "description",
                placeholder: "No Description",
                label: "Description: ",
                type: "long-string",
                multiple: true
            })
        ]),
        editable: true,
        multiple: true,
        toLoad: async () => {
            return await base.load("projects");
        },
        toSave: async (item, which, deleting) => {
            await base.do("save-project", { item, which, deleting });
        }
    });
    metaBrowser.render();

    const floatBoard = new FloatBoard();
</script>